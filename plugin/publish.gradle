apply plugin: 'maven-publish'
apply plugin: 'signing'

ext.lib_version = "$agent_version"
ext.lib_artifact_id = "android-agent-plugin"

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

afterEvaluate {
    publishing {
        publications {
            pluginMaven(MavenPublication) {
                groupId = "$lib_group_id"
                artifactId = "$lib_artifact_id"
                version = "$lib_version"

                pom {
                    name = 'Instana - Android Agent'
                    description = 'Gather end-user Android app performance data'
                    url = 'https://github.com/instana/android-agent'
                    organization { name = 'Instana Inc.'; url = 'https://www.instana.com' }
                    developers { developer { name = 'Mikel Pascual'; email = 'mikel.pascual@external.instana.com'; url = 'https://www.instana.com' } }
                    licenses { license { name = 'The MIT License'; url = 'https://github.com/instana/android-agent/blob/master/LICENSE' } }
                    scm {
                        connection = 'scm:git:git://github.com/instana/android-agent.git'
                        developerConnection = 'scm:git:ssh://git@github.com:instana/android-agent.git'
                        url = 'https://github.com/instana/android-agent'
                    }
                }

                artifact tasks.sourcesJar
                artifact tasks.javadocJar
            }
        }
    }
}

// Signing unchanged (same as runtime)
signing {
    def file = new File("$rootDir/publish.properties")
    if (file.exists()) {
        def props = new Properties(); props.load(new FileInputStream(file))
        def signingKey = (new File(props['signing.file.secretASCIIArmoredKey'])).text
        def signingPassword = (new File(props['signing.file.password'])).text.trim()
        useInMemoryPgpKeys(signingKey, signingPassword)
    } else {
        logger.warn('Signing will be skipped: invalid signing config')
        required false
    }
    sign publishing.publications
}
